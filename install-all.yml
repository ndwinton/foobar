---
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: platform-automation-tasks
  type: gcs
  source:
    bucket: ((bucket))
    regexp: platform-automation-tasks-(.*).zip
    json_key: ((json_key))

- name: platform-automation-image
  type: gcs
  source:
    bucket: ((bucket))
    regexp: platform-automation-image-(.*).tgz
    json_key: ((json_key))

- name: state
  type: gcs
  source:
    bucket: ((state-bucket))
    versioned_file: state.yml
    json_key: ((json_key))

- name: installation
  type: gcs
  source:
    bucket: ((state-bucket))
    versioned_file: installation.zip
    json_key: ((json_key))

- name: configuration
  type: git
  source:
    private_key: ((config-repo-key.private_key))
    uri: ((config-repo-uri))

- name: daily
  type: time
  source:
    interval: 24h

- name: tas-product
  type: gcs
  source:
    bucket: ((bucket))
    json_key: ((json_key))
    regexp: \[.*\]srt-(.*).pivotal
    skip_download: true

jobs:
- name: install-opsman
  plan:
  - in_parallel:
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
    - get: state
  - do: &interpolate-env-creds
    - task: interpolate-env-creds
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub-client))
        CREDHUB_SECRET: ((credhub-secret))
        CREDHUB_SERVER: ((credhub-server))
        CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
        PREFIX: '/concourse/sandbox'
        SKIP_MISSING: false
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: interpolated-configuration
  - do: &download-opsman-product
    - task: download-opsman-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product/opsman.yml
        SOURCE: gcs
      input_mapping:
        config: interpolated-configuration
      output_mapping:
        downloaded-product: opsman-image
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      config: interpolated-configuration
    params:
      OPSMAN_CONFIG_FILE: sandbox/opsman.yml
    ensure: &put-state
      do:
      - put: state
        params: { file: generated-state/state.yml }
  - do: &configure-authentication
    - task: configure-authentication
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-authentication.yml
      input_mapping:
        env: interpolated-configuration
        config: interpolated-configuration
      params:
        ENV_FILE: sandbox/env.yml
        AUTH_CONFIG_FILE: sandbox/auth.yml
  - do: &configure-director
    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: interpolated-configuration
        config: interpolated-configuration
      params:
        ENV_FILE: sandbox/env.yml
        DIRECTOR_CONFIG_FILE: sandbox/director.yml
  - do: &apply-director-changes
    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: interpolated-configuration
      params:
        ENV_FILE: sandbox/env.yml

- name: export-installation
  plan:
  - in_parallel:
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
    - get: state
    - get: daily
      trigger: true
  - do: *interpolate-env-creds
  - do: &export-installation
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: interpolated-configuration
      params:
        ENV_FILE: sandbox/env.yml
        INSTALLATION_FILE: installation.zip
      ensure:
        do:
        - put: installation
          params: { file: installation/installation.zip }

- name: upgrade-opsman
  plan:
  - in_parallel:
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
    - get: state
    - get: installation
      passed: [ export-installation ]
  - do: *interpolate-env-creds
  - do: *download-opsman-product
  - task: upgrade-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      env: interpolated-configuration
      config: interpolated-configuration
      image: opsman-image
    params:
      ENV_FILE: sandbox/env.yml
      OPSMAN_CONFIG_FILE: sandbox/opsman.yml
    ensure: *put-state
  - do: *configure-director
  - do: *apply-director-changes
  - do: *export-installation

- name: upload-and-stage-tas
  plan:
  - in_parallel:
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
    - get: tas-product
      trigger: true
  - do: *interpolate-env-creds
  - task: download-tas-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product/tas.yml
      SOURCE: gcs
    input_mapping:
      config: interpolated-configuration
    output_mapping:
      downloaded-product: tas-product
      downloaded-stemcell: tas-stemcell
  - task: upload-and-stage-tas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: tas-product
      env: interpolated-configuration
    params:
      ENV_FILE: sandbox/env.yml
  - task: upload-tas-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-configuration
      stemcell: tas-stemcell
    params:
      ENV_FILE: sandbox/env.yml 

- name: configure-tas
  plan:
  - in_parallel:
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
    - get: tas-product
      passed: [ upload-and-stage-tas ]
      trigger: true
  - do: *interpolate-env-creds
  - task: configure-tas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-configuration
      env: interpolated-configuration
    params:
      CONFIG_FILE: sandbox/tas.yml
      ENV_FILE: sandbox/env.yml

- name: apply-changes
  plan:
  - in_parallel:
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
    - get: tas-product
      passed: [ configure-tas ]
      trigger: true
  - do: *interpolate-env-creds
  - do: &apply-changes
    - task: apply-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: interpolated-configuration
      params:
        ENV_FILE: sandbox/env.yml
